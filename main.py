import logging
import asyncio
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from sqlalchemy import select, func
import os
from config import Config
from database import Database, User, Referral, Payout
from keyboards import (
    get_main_menu_keyboard, get_agreement_keyboard, get_admin_keyboard,
    get_payouts_keyboard, get_payment_methods_keyboard, get_broadcast_keyboard,
    get_back_keyboard, get_payout_management_keyboard, get_recipients_keyboard,
    get_broadcast_confirmation_keyboard
)
from messages import Messages

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
broadcast_data = {
    'text': None,
    'recipients': 'all',  # all, signed, unsigned
    'users_count': 0
}

class PartnerBot:
    def __init__(self, token):
        self.application = Application.builder().token(token).build()
        self.db = Database()
        self.broadcast_data = {
            'text': None,
            'recipients': 'all',
            'users_count': 0
        }
        self.setup_handlers()

    def setup_handlers(self):
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("stats", self.stats))
        self.application.add_handler(CommandHandler("payout", self.payout))
        self.application.add_handler(CommandHandler("admin", self.admin))
        self.application.add_handler(CommandHandler("debug", self.debug_users))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def debug_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
            if update.effective_user.id == Config.ADMIN_ID:
                users_all = self.db.get_all_users()
                users_signed = self.db.get_all_users(signed_only=True)

                text = f"""üêû *–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*

    üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:
    ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_all)}
    ‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–≤—à–∏—Ö —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ: {len(users_signed)}
    ‚Ä¢ –ù–µ–ø–æ–¥–ø–∏—Å–∞–≤—à–∏—Ö: {len(users_all) - len(users_signed)}

    üë• –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"""

                for i, user in enumerate(users_all[:5]):  # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã—Ö 5
                    text += f"\n{i + 1}. ID: {user.user_id}, –ò–º—è: {user.first_name}, –ü–æ–¥–ø–∏—Å–∞–ª: {user.signed_agreement}"

                await update.message.reply_text(text)

    async def safe_edit_message(self, query, text, reply_markup=None, parse_mode=None):
        try:
            await query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            try:
                await query.message.reply_text(
                    text=text,
                    reply_markup=reply_markup
                )
            except Exception as e2:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        db_user = self.db.get_user(user.id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        if context.args:
            ref_link = context.args[0]
            if ref_link.startswith('ref_'):
                if not db_user:
                    db_user = self.db.create_user(user)
                    ref_owner = self.db.get_user_by_referral_link(ref_link)
                    if ref_owner and ref_owner.user_id != user.id:
                        self.db.add_referral(ref_owner.user_id, user.id)
                        if db_user and db_user.signed_agreement:
                            self.db.confirm_referral(user.id)
                        try:
                            await context.bot.send_message(
                                chat_id=ref_owner.user_id,
                                text=f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä: {user.first_name}"
                            )
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: {e}")

        if not db_user:
            db_user = self.db.create_user(user)
            for message in Messages.get_offer_messages():
                await update.message.reply_text(message)
                await asyncio.sleep(1)

        keyboard = get_main_menu_keyboard(db_user.signed_agreement if db_user else False)
        await update.message.reply_text(
            Messages.get_welcome_message(user.first_name),
            reply_markup=keyboard
        )

    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        db_user = self.db.get_user(user.id)

        if not db_user or not db_user.signed_agreement:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è")
            return

        stats = self.db.get_user_stats(user.id)
        bot_username = (await context.bot.get_me()).username
        ref_link = f"https://t.me/{bot_username}?start={db_user.referral_link}"

        stats_text = Messages.get_stats_text(stats, ref_link)
        await update.message.reply_text(stats_text)

    async def payout(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        db_user = self.db.get_user(user.id)

        if not db_user or not db_user.signed_agreement:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è")
            return

        stats = self.db.get_user_stats(user.id)
        payouts_text = Messages.get_payouts_text(stats)
        await update.message.reply_text(
            payouts_text,
            reply_markup=get_payouts_keyboard()
        )

    async def admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        if user.id == Config.ADMIN_ID:
            await update.message.reply_text(
                "üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                reply_markup=get_admin_keyboard()
            )
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        text = update.message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã
        if hasattr(context, 'user_data') and context.user_data.get('awaiting_payout'):
            payment_method = context.user_data.get('payment_method')

            try:
                lines = text.split('\n')
                details = lines[0].strip()
                amount_text = lines[-1] if len(lines) > 1 else text
                import re
                amount_match = re.search(r'(\d+(?:[.,]\d+)?)', amount_text)

                if amount_match:
                    amount = float(amount_match.group(1).replace(',', '.'))
                else:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—É–º–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏.")
                    return

                if amount < Config.MIN_PAYOUT:
                    await update.message.reply_text(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã {Config.MIN_PAYOUT} —Ä—É–±.")
                    return

                stats = self.db.get_user_stats(user.id)
                if amount > stats['available_balance']:
                    await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã")
                    return

                payout = self.db.create_payout_request(user.id, amount, payment_method, details)
                if payout:
                    context.user_data.pop('awaiting_payout', None)
                    context.user_data.pop('payment_method', None)

                    await update.message.reply_text(
                        Messages.get_payout_success_text()
                    )

                    try:
                        await context.bot.send_message(
                            chat_id=Config.ADMIN_ID,
                            text=f"ü§ë –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É!\n\n"
                                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username})\n"
                                 f"–°—É–º–º–∞: {amount} —Ä—É–±.\n"
                                 f"–ú–µ—Ç–æ–¥: {payment_method}\n"
                                 f"–†–µ–∫–≤–∏–∑–∏—Ç—ã: {details}",
                            reply_markup=get_payout_management_keyboard(payout.id)
                        )
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏")

            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–ø–ª–∞—Ç—ã: {e}")
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        elif hasattr(context, 'user_data') and context.user_data.get('awaiting_broadcast_text'):
            text = update.message.text
            print(f"üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏: {text[:50]}...")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
            self.broadcast_data['text'] = text
            context.user_data.pop('awaiting_broadcast_text', None)

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if self.broadcast_data['recipients'] == 'all':
                users = self.db.get_all_users()
            elif self.broadcast_data['recipients'] == 'signed':
                users = self.db.get_all_users(signed_only=True)
            else:
                users = self.db.get_all_users(signed_only=False)

            self.broadcast_data['users_count'] = len(users)

            print(f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}")

            await update.message.reply_text(
                f"‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                f"–ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {self.broadcast_data['recipients']}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.",
                reply_markup=get_broadcast_keyboard()
            )

    async def send_broadcast_message(self, context, user_id, message_text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=message_text
            )
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
        except Exception as e:
            error_msg = str(e)
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {error_msg}")

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
            if "Forbidden" in error_msg:
                print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            elif "Chat not found" in error_msg:
                print(f"   –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            elif "bot was blocked" in error_msg.lower():
                print(f"   –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")

            return False

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
            query = update.callback_query
            await query.answer()

            user = query.from_user
            db_user = self.db.get_user(user.id)

            try:
                if query.data == "about":
                    await self.safe_edit_message(
                        query,
                        Messages.get_about_text(),
                        get_main_menu_keyboard(db_user.signed_agreement if db_user else False)
                    )

                elif query.data == "partnership_info":
                    await self.safe_edit_message(
                        query,
                        Messages.get_partnership_info(),
                        get_main_menu_keyboard(db_user.signed_agreement if db_user else False)
                    )

                elif query.data == "sign_agreement":
                    await self.safe_edit_message(
                        query,
                        Messages.get_agreement_text(),
                        get_agreement_keyboard()
                    )

                elif query.data == "confirm_agreement":
                    if db_user:
                        self.db.sign_agreement(user.id)
                        stmt = select(Referral).where(Referral.referred_id == user.id)
                        referrals = self.db.session.scalars(stmt).all()

                        for referral in referrals:
                            self.db.confirm_referral(referral.referred_id)

                        await self.safe_edit_message(
                            query,
                            "‚úÖ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞.",
                            get_main_menu_keyboard(True)
                        )
                    else:
                        await self.safe_edit_message(
                            query,
                            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                            get_main_menu_keyboard(False)
                        )

                elif query.data == "cancel_agreement":
                    await self.safe_edit_message(
                        query,
                        "‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è. –ë–µ–∑ —ç—Ç–æ–≥–æ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.",
                        get_main_menu_keyboard(False)
                    )

                elif query.data == "stats" and db_user and db_user.signed_agreement:
                    stats = self.db.get_user_stats(user.id)
                    bot_username = (await context.bot.get_me()).username
                    ref_link = f"https://t.me/{bot_username}?start={db_user.referral_link}"

                    stats_text = Messages.get_stats_text(stats, ref_link)
                    await self.safe_edit_message(
                        query,
                        stats_text,
                        get_main_menu_keyboard(True)
                    )

                elif query.data == "referral_link" and db_user and db_user.signed_agreement:
                    bot_username = (await context.bot.get_me()).username
                    ref_link = f"https://t.me/{bot_username}?start={db_user.referral_link}"
                    await self.safe_edit_message(
                        query,
                        f"üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*\n`{ref_link}`\n\n*–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!* üí∞",
                        get_main_menu_keyboard(True)
                    )

                elif query.data == "documents" and db_user and db_user.signed_agreement:
                    await self.safe_edit_message(
                        query,
                        Messages.get_documents_text(),
                        get_main_menu_keyboard(True)
                    )

                elif query.data == "payouts" and db_user and db_user.signed_agreement:
                    stats = self.db.get_user_stats(user.id)
                    payouts_text = Messages.get_payouts_text(stats)
                    await self.safe_edit_message(
                        query,
                        payouts_text,
                        get_payouts_keyboard()
                    )

                elif query.data == "support" and db_user and db_user.signed_agreement:
                    await self.safe_edit_message(
                        query,
                        Messages.get_support_text(),
                        get_main_menu_keyboard(True)
                    )

                elif query.data == "back_to_main":
                    await self.safe_edit_message(
                        query,
                        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                        get_main_menu_keyboard(db_user.signed_agreement if db_user else False)
                    )

                elif query.data == "back_to_payouts":
                    stats = self.db.get_user_stats(user.id)
                    payouts_text = Messages.get_payouts_text(stats)
                    await self.safe_edit_message(
                        query,
                        payouts_text,
                        get_payouts_keyboard()
                    )

                elif query.data == "back_to_admin":
                    await self.safe_edit_message(
                        query,
                        "üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        get_admin_keyboard()
                    )

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–ª–∞—Ç
                elif query.data == "request_payout" and db_user and db_user.signed_agreement:
                    stats = self.db.get_user_stats(user.id)
                    if stats['available_balance'] < Config.MIN_PAYOUT:
                        await self.safe_edit_message(
                            query,
                            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {Config.MIN_PAYOUT} —Ä—É–±.\n\n"
                            f"*–î–æ—Å—Ç—É–ø–Ω–æ:* {stats['available_balance']} —Ä—É–±.",
                            get_payouts_keyboard()
                        )
                    else:
                        await self.safe_edit_message(
                            query,
                            Messages.get_payout_request_text(),
                            get_payment_methods_keyboard()
                        )

                elif query.data == "payout_history" and db_user and db_user.signed_agreement:
                    payouts = self.db.get_user_payouts(user.id)
                    if not payouts:
                        history_text = "*üìã –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç*\n\n–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–ø–ª–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
                    else:
                        history_text = "*üìã –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç*\n\n"
                        for payout in payouts:
                            status_icons = {
                                'pending': 'üü°',
                                'approved': '‚úÖ',
                                'rejected': '‚ùå',
                                'paid': 'üí∞'
                            }
                            history_text += f"{status_icons.get(payout.status, '‚ö™')} *{payout.amount} —Ä—É–±.* - {payout.status}\n"
                            history_text += f"*–î–∞—Ç–∞:* {payout.requested_at.strftime('%d.%m.%Y %H:%M')}\n"
                            if payout.processed_at:
                                history_text += f"*–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:* {payout.processed_at.strftime('%d.%m.%Y %H:%M')}\n"
                            history_text += "\n"

                    await self.safe_edit_message(
                        query,
                        history_text,
                        get_back_keyboard("back_to_payouts")
                    )

                elif query.data.startswith("method_") and db_user and db_user.signed_agreement:
                    method = query.data.replace("method_", "")
                    context.user_data['awaiting_payout'] = True
                    context.user_data['payment_method'] = method

                    await self.safe_edit_message(
                        query,
                        Messages.get_payout_method_text(method),
                        get_back_keyboard("request_payout")
                    )

                # –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏
                elif query.data == "broadcast" and user.id == Config.ADMIN_ID:
                    await self.safe_edit_message(
                        query,
                        Messages.get_broadcast_start_text(),
                        get_broadcast_keyboard()
                    )

                elif query.data == "admin_stats" and user.id == Config.ADMIN_ID:
                    total_users = self.db.session.scalar(select(func.count(User.id))) or 0
                    signed_users = self.db.session.scalar(
                        select(func.count(User.id)).where(User.signed_agreement == True)) or 0
                    total_referrals = self.db.session.scalar(select(func.count(Referral.id))) or 0

                    pending_payouts_stmt = select(func.sum(Payout.amount)).where(Payout.status == 'pending')
                    pending_payouts = self.db.session.scalar(pending_payouts_stmt) or 0

                    stats_text = Messages.get_admin_stats_text(total_users, signed_users, total_referrals,
                                                               pending_payouts)
                    await self.safe_edit_message(
                        query,
                        stats_text,
                        get_admin_keyboard()
                    )

                elif query.data == "payout_requests" and user.id == Config.ADMIN_ID:
                    pending_payouts = self.db.get_pending_payouts()
                    if not pending_payouts:
                        await self.safe_edit_message(
                            query,
                            "üí∞ *–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–ø–ª–∞—Ç—ã*\n\n–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–ø–ª–∞—Ç—ã.",
                            get_admin_keyboard()
                        )
                    else:
                        payout_text = "üí∞ *–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–ø–ª–∞—Ç—ã*\n\n"
                        for payout in pending_payouts:
                            payout_user = self.db.get_user(payout.user_id)
                            username = f"@{payout_user.username}" if payout_user.username else payout_user.first_name
                            payout_text += f"*#{payout.id}* - {payout.amount} —Ä—É–±.\n"
                            payout_text += f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {username}\n"
                            payout_text += f"*–ú–µ—Ç–æ–¥:* {payout.payment_method}\n"
                            payout_text += f"*–î–∞—Ç–∞:* {payout.requested_at.strftime('%d.%m.%Y %H:%M')}\n"
                            payout_text += f"*–†–µ–∫–≤–∏–∑–∏—Ç—ã:* {payout.details}\n\n"

                        await self.safe_edit_message(
                            query,
                            payout_text,
                            get_admin_keyboard()
                        )

                elif query.data.startswith("approve_") and user.id == Config.ADMIN_ID:
                    payout_id = int(query.data.replace("approve_", ""))
                    payout = self.db.update_payout_status(payout_id, "approved")
                    if payout:
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        try:
                            payout_user = self.db.get_user(payout.user_id)
                            await context.bot.send_message(
                                chat_id=payout_user.user_id,
                                text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É #{payout.id} –Ω–∞ —Å—É–º–º—É {payout.amount} —Ä—É–±. –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n"
                                     f"–û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π."
                            )
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

                        await self.safe_edit_message(
                            query,
                            f"‚úÖ –ó–∞—è–≤–∫–∞ #{payout_id} –æ–¥–æ–±—Ä–µ–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.",
                            get_admin_keyboard()
                        )

                elif query.data.startswith("reject_") and user.id == Config.ADMIN_ID:
                    payout_id = int(query.data.replace("reject_", ""))
                    payout = self.db.update_payout_status(payout_id, "rejected")
                    if payout:
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        try:
                            payout_user = self.db.get_user(payout.user_id)
                            await context.bot.send_message(
                                chat_id=payout_user.user_id,
                                text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É #{payout.id} –Ω–∞ —Å—É–º–º—É {payout.amount} —Ä—É–±. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
                                     f"–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                            )
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

                        await self.safe_edit_message(
                            query,
                            f"‚ùå –ó–∞—è–≤–∫–∞ #{payout_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.",
                            get_admin_keyboard()
                        )

                # –†–∞—Å—Å—ã–ª–∫–∞ - –í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
                elif query.data == "broadcast_recipients" and user.id == Config.ADMIN_ID:
                    users_all = self.db.get_all_users()
                    users_signed = self.db.get_all_users(signed_only=True)
                    users_unsigned = self.db.get_all_users(signed_only=False)

                    recipients_text = f"""*üë• –í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π*

    *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–π:*
    ‚Ä¢ üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(users_all)} —á–µ–ª.
    ‚Ä¢ ‚úÖ –ü–æ–¥–ø–∏—Å–∞–≤—à–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ: {len(users_signed)} —á–µ–ª.
    ‚Ä¢ ‚ùå –ù–µ–ø–æ–¥–ø–∏—Å–∞–≤—à–∏–µ: {len(users_unsigned)} —á–µ–ª.

    –í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"""

                    await self.safe_edit_message(
                        query,
                        recipients_text,
                        get_recipients_keyboard()
                    )

                # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
                elif query.data.startswith("recipients_") and user.id == Config.ADMIN_ID:
                    recipients_type = query.data.replace("recipients_", "")

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞ –≤–º–µ—Å—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                    self.broadcast_data['recipients'] = recipients_type

                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
                    if recipients_type == 'all':
                        users = self.db.get_all_users()
                    elif recipients_type == 'signed':
                        users = self.db.get_all_users(signed_only=True)
                    else:
                        users = self.db.get_all_users(signed_only=False)

                    self.broadcast_data['users_count'] = len(users)

                    recipients_names = {
                        'all': 'üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
                        'signed': '‚úÖ –ü–æ–¥–ø–∏—Å–∞–≤—à–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ',
                        'unsigned': '‚ùå –ù–µ–ø–æ–¥–ø–∏—Å–∞–≤—à–∏–µ'
                    }

                    await self.safe_edit_message(
                        query,
                        f"‚úÖ –í—ã–±—Ä–∞–Ω—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–∏: *{recipients_names[recipients_type]}*\n\n"
                        f"*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                        f"–¢–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É.",
                        get_broadcast_keyboard()
                    )

                # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
                elif query.data == "broadcast_start" and user.id == Config.ADMIN_ID:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞ –≤–º–µ—Å—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                    if not self.broadcast_data['text']:
                        await self.safe_edit_message(
                            query,
                            "‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏!",
                            get_broadcast_keyboard()
                        )
                        return

                    if self.broadcast_data['users_count'] == 0:
                        await self.safe_edit_message(
                            query,
                            "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏!",
                            get_broadcast_keyboard()
                        )
                        return

                    preview_text = Messages.get_broadcast_preview_text(
                        self.broadcast_data['text'],
                        self.broadcast_data['recipients'],
                        self.broadcast_data['users_count']
                    )

                    await self.safe_edit_message(
                        query,
                        preview_text,
                        get_broadcast_confirmation_keyboard()
                    )

                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
                elif query.data == "broadcast_confirm" and user.id == Config.ADMIN_ID:
                    print("üöÄ –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏...")

                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    if self.broadcast_data['recipients'] == 'all':
                        users = self.db.get_all_users()
                    elif self.broadcast_data['recipients'] == 'signed':
                        users = self.db.get_all_users(signed_only=True)
                    else:
                        users = self.db.get_all_users(signed_only=False)

                    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

                    if len(users) == 0:
                        await self.safe_edit_message(
                            query,
                            "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!",
                            get_broadcast_keyboard()
                        )
                        return

                    sent_count = 0
                    failed_count = 0
                    total_users = len(users)

                    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
                    start_message = await query.message.reply_text(
                        f"üöÄ *–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...*\n\n"
                        f"*–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:* {total_users}\n"
                        f"*–¢–∏–ø:* {self.broadcast_data['recipients']}\n"
                        f"*–ü—Ä–æ–≥—Ä–µ—Å—Å:* 0/{total_users} (0%)"
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
                    for index, user_obj in enumerate(users):
                        try:
                            print(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ {index + 1}/{total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_obj.user_id}")

                            success = await self.send_broadcast_message(
                                context,
                                user_obj.user_id,
                                self.broadcast_data['text']
                            )

                            if success:
                                sent_count += 1
                                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
                            else:
                                failed_count += 1
                                print(f"   ‚ùå –û—à–∏–±–∫–∞")

                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                            if (index + 1) % 5 == 0 or (index + 1) == total_users:
                                progress = (sent_count + failed_count) / total_users * 100
                                try:
                                    await context.bot.edit_message_text(
                                        chat_id=start_message.chat_id,
                                        message_id=start_message.message_id,
                                        text=f"üì§ *–ò–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞...*\n\n"
                                             f"*–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:* {total_users}\n"
                                             f"*–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:* {sent_count + failed_count}/{total_users}\n"
                                             f"*–£—Å–ø–µ—à–Ω–æ:* {sent_count}\n"
                                             f"*–û—à–∏–±–æ–∫:* {failed_count}\n"
                                             f"*–ü—Ä–æ–≥—Ä–µ—Å—Å:* {progress:.1f}%"
                                    )
                                except Exception as e:
                                    print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

                            # –ó–∞–¥–µ—Ä–∂–∫–∞
                            await asyncio.sleep(Config.BROADCAST_DELAY)

                        except Exception as e:
                            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_obj.user_id}: {e}")
                            failed_count += 1

                    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    print(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {sent_count}, –û—à–∏–±–æ–∫: {failed_count}")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    self.db.save_admin_message(user.id, self.broadcast_data['text'], sent_count)

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    result_text = f"""‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*

                üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:*
                üë• –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_users}
                ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}
                ‚ùå –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {failed_count}
                üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(sent_count / total_users * 100) if total_users > 0 else 0:.1f}%"""

                    await context.bot.edit_message_text(
                        chat_id=start_message.chat_id,
                        message_id=start_message.message_id,
                        text=result_text
                    )

                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    self.broadcast_data = {
                        'text': None,
                        'recipients': 'all',
                        'users_count': 0
                    }

                    print("üîÑ –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")

                # –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
                elif query.data == "broadcast_cancel" and user.id == Config.ADMIN_ID:
                    await self.safe_edit_message(
                        query,
                        "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                        get_broadcast_keyboard()
                    )

                # –†–∞—Å—Å—ã–ª–∫–∞ - –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
                elif query.data == "broadcast_text" and user.id == Config.ADMIN_ID:
                    context.user_data['awaiting_broadcast_text'] = True
                    await self.safe_edit_message(
                        query,
                        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown —Ä–∞–∑–º–µ—Ç–∫–∞.",
                        get_back_keyboard("broadcast")
                    )

                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
                elif query.data == "debug_broadcast" and user.id == Config.ADMIN_ID:
                    debug_info = f"""*üêû –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏*

                *–¢–µ–∫—Å—Ç:* {self.broadcast_data['text']}
                *–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:* {self.broadcast_data['recipients']}
                *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {self.broadcast_data['users_count']}

                *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*
                ‚Ä¢ –í—Å–µ–≥–æ: {len(self.db.get_all_users())}
                ‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–≤—à–∏–µ: {len(self.db.get_all_users(signed_only=True))}
                ‚Ä¢ –ù–µ–ø–æ–¥–ø–∏—Å–∞–≤—à–∏–µ: {len(self.db.get_all_users(signed_only=False))}"""

                    await self.safe_edit_message(
                        query,
                        debug_info,
                        get_admin_keyboard()
                    )

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
                await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    async def handle_broadcast_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if hasattr(context, 'user_data') and context.user_data.get('awaiting_broadcast_text'):
            text = update.message.text
            print(f"üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏: {text[:50]}...")

            self.broadcast_data['text'] = text
            context.user_data.pop('awaiting_broadcast_text', None)

            if self.broadcast_data['recipients'] == 'all':
                users = self.db.get_all_users()
            elif self.broadcast_data['recipients'] == 'signed':
                users = self.db.get_all_users(signed_only=True)
            else:
                users = self.db.get_all_users(signed_only=False)

            self.broadcast_data['users_count'] = len(users)

            print(f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}")

            await update.message.reply_text(
                f"‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                f"–ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {self.broadcast_data['recipients']}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.",
                reply_markup=get_broadcast_keyboard()
            )

    async def send_broadcast_message(self, context, user_id, message_text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=self.broadcast_data['text'],
            )
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False

def main():
    if not Config.BOT_TOKEN or Config.BOT_TOKEN == 'your_telegram_bot_token':
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º:")
        print("BOT_TOKEN=your_actual_bot_token_here")
        print("ADMIN_ID=your_telegram_id_here")
        print("\nüìù –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω:")
        print("1. –ù–∞–ø–∏—à–∏—Ç–µ @BotFather –≤ Telegram")
        print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot")
        print("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—ã–¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª")
        return

    if Config.ADMIN_ID == 0:
        print("‚ùå –û—à–∏–±–∫–∞: ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID –≤ .env —Ñ–∞–π–ª–µ")
        return

    try:
        bot = PartnerBot(Config.BOT_TOKEN)
        print("ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω...")
        print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        print("üîó –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")

        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö retry-–º–µ—Ö–∞–Ω–∏–∑–º–æ–≤
        bot.application.run_polling()

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ BOT_TOKEN –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ)")


if __name__ == '__main__':
    main()